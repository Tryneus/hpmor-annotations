function annotate(){let t=document.getElementById('hpmor-annotations-frame'),e=document.getElementById('hpmor-annotations-overlay');if(!t)console.error('hpmor-annotations: Could not find iframe.');else{let n=t.contentWindow.location.href,r=n.match(/\/([0-9]+)(\.html)?$/),o=r&&parseInt(r[1]),a=t.contentDocument.getElementById('storycontent');e?o?a?fetch_annotations(o,t=>apply_annotations(a,e,t)):console.error('hpmor-annotations: Could not find story content.'):console.error('hpmor-annotations: Could not determine chapter.',n):console.error('hpmor-annotations: Could not find overlay.')}}function fetch_annotations(t,e){let n=new XMLHttpRequest;n.open('GET',`https://tryneus.github.io/hpmor-annotations/dist/annotation/${t}.json`);n.send();n.onerror=()=>{console.error('hpmor-annotations: Could not load annotations.')};n.onload=()=>{n.status!==200?console.error('hpmor-annotations: Loading annotations failed, status:',n.status):e(parse_annotations(n.response))}}function parse_annotations(t){try{return JSON.parse(t)}catch(t){console.error('hpmor-annotations: Failed to parse annotations',t)}}function find_matches(t,e){let{id:n,text:r,disambiguation:o}=t,a=Array.from(Array(e.length).keys()),i=r.map((t,n)=>{if(r.length>1){if(n===0){return a.filter(n=>e[n].innerText.endsWith(t))}else if(n===r.length-1){return a.filter(n=>e[n].innerText.startsWith(t))}else{return a.filter(n=>e[n].innerText===t)}}else{return a.filter(n=>e[n].innerText.includes(t))}});if(i[0].length===0){console.error(`hpmor-annotations: Could not find text for annotation ${n}.`);return null}let l=i[0].filter(t=>{for(let e=1;e<i.length;++e){if(!i[e].includes(t+e)){return!1}}return!0});if(l.length===0){console.error(`hpmor-annotations: Could not find text for annotation ${n}.`);return null}else if(o){if(l.length===o.expect){return l[o.useIndex]}else{console.error(`hpmor-annotations: Unexpected number of matches for annotation ${n}.`+` Found ${l.length}, expected ${o.expect}.`);return null}}else if(l.length===1){return l[0]}else{console.error(`hpmor-annotations: Found multiple matches for annotation ${n}.`+` Matching paragraph indices: ${l.join(', ')}.`);return null}}function apply_annotations(t,e,n){let r=Array.from(t.getElementsByTagName('p'));n.map((t,e)=>{let n=find_matches(t,r);console.log(`annotation ${e}:`,n.map((e,n)=>[t.text[n],e]))})}function reload_script(){let t=Array.from(document.getElementsByTagName('script')).filter(t=>Boolean(t.src.match(/\/annotate.js$/)));if(t.length===0)console.error('Could not find script to reload.');else if(t.length>1)console.error('Found too many matching script elements.',t);else{let e=t[0],n=document.createElement('script');n.src=e.src.replace('dist','src');e.parentNode.removeChild(e);document.body.appendChild(n)}}module&&module.exports&&(module.exports={annotate,fetch_annotations,parse_annotations,find_matches,apply_annotations,reload_script})