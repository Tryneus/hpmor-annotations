function annotate(){let n=document.getElementById('hpmor-annotations-frame'),t=document.getElementById('hpmor-annotations-overlay');if(!n)console.error('hpmor-annotations: Could not find iframe.');else{let o=n.contentWindow.location.href,e=o.match(/\/([0-9]+)(\.html)?$/),a=e&&parseInt(e[1]),r=n.contentDocument.getElementById('storycontent');t?a?r?fetchAnnotations(a,n=>{clearNotes(r),innerHTML=r.innerHTML.replace(/[\n ]+/g,' '),Object.values(n).forEach(n=>{innerHTML=innerHTML.replace(n.text,n.replacement)}),r.innerHTML=innerHTML,addNotes(r,n)}):console.error('hpmor-annotations: Could not find story content.'):console.error('hpmor-annotations: Could not determine chapter.',o):console.error('hpmor-annotations: Could not find overlay.')}}function getAnnotationSpans(n){return Array.from(n.getElementsByTagName('span')).filter(n=>n.attributes.annotation&&n.attributes.annotation.value.match(/^hpmor-[0-9]+-[0-9]+$/))}function getNoteDivs(n){return Array.from(n.getElementsByTagName('div')).filter(n=>n.id.match(/^hpmor-[0-9]+-[0-9]+-note$/))}function fetchAnnotations(n,t){let o=new XMLHttpRequest;o.open('GET',`https://tryneus.github.io/hpmor-annotations/dist/annotation/${n}.json`);o.send();o.onerror=()=>{console.error('hpmor-annotations: Could not load annotations.')};o.onload=()=>{o.status!==200?console.error('hpmor-annotations: Loading annotations failed, status:',o.status):t(parseAnnotations(o.response))}}function parseAnnotations(n){try{return JSON.parse(n)}catch(n){console.error('hpmor-annotations: Failed to parse annotations',n)}}function clearNotes(n){getAnnotationSpans(n).forEach(n=>{n.outerHTML=n.innerHTML});getNoteDivs(n).forEach(n=>{n.parentNode.removeChild(n)})}function addNotes(n,t){let o={'foreshadowing':'#888','consequence':'#f6f','reference':'#66f','departure':'#f90','original':'#6f0','speculation':'#e0f','background':'#30f','spoiler':'#f00'},e=getAnnotationSpans(n).map(n=>{let e=n.attributes.annotation.value,a=t[e];if(!a){console.error('hpmor-annotations: Could not find annotation',e);return null}let r=o[a.tags[0]];n.style['text-decoration']=`dotted ${r} underline`;return{annotation:a,span:n}}),a=e.reduce((n,t)=>{n[t.annotation.id]||(n[t.annotation.id]={annotation:t.annotation,spans:[]});n[t.annotation.id].spans.push(t.span);return n},{});Object.values(a).forEach(n=>{n.spans.sort((n,t)=>n.getBoundingClientRect().top-t.getBoundingClientRect().top);let t=n.spans[0],o=n.spans[n.spans.length-1],e=o.getBoundingClientRect().bottom-t.getBoundingClientRect().top;console.log(`${n.annotation.id} height: ${e}`);t.innerHTML=t.innerHTML+`
      <div style="position: absolute;" id="${n.annotation.id}-note">
        <span style="position: relative;">
          <div style="position: absolute;right: 0;">
            <div style="font: all-small-caps 600 15px \"PT Sans\", Georgia;">${n.annotation.tags.join(' ')}</div>
            <div>${n.annotation.note}</div>
          </div>
        </span>
      </div>`})}function reloadScript(){let n=Array.from(document.getElementsByTagName('script')).filter(n=>Boolean(n.src.match(/\/annotate.js$/)));if(n.length===0)console.error('Could not find script to reload.');else if(n.length>1)console.error('Found too many matching script elements.',n);else{let t=n[0],o=document.createElement('script');o.src=t.src.replace('dist','src');t.parentNode.removeChild(t);document.body.appendChild(o)}}typeof module!=='undefined'&&module.exports&&(module.exports={annotate,fetchAnnotations,parseAnnotations,addNotes,reloadScript})